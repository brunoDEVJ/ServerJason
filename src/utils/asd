
	    if fJArray.Count > 0 then
            begin

              OpenPriKey(Cmd.NomeTabela);

              RecCount:= fPriQry.RecordCount;

              if RecCount > 0 then    //Carregando o nome das primaryKey
              begin

                for i := 0 to RecCount - 1 do
                begin
                  PKNome[i].aCampo := fPriQry.FieldByName('campo').AsString;
                  PKNome[i].aValue := '';
                  fPriQry.Next;
                end;

                Aux := '';
                for ContObj := 0 to fJArray.Count - 1  do   //colocando valores nas primaryKey
                begin

                  JObj :=  fJArray.Items[ContObj] as TJsonObject;
                  Aux := Aux + '(';

                  for i := 0 to RecCount - 1 do
                  begin

                    S := JObj.GetValue((PKNome[i].aCampo)).Value;

                    Aux := Aux + '(' + PKNome[i].aCampo + ' = ' + S.QuotedString + ') ';
                    if i = RecCount - 1 then
                      Aux := Aux + ')'
                    else Aux := Aux + 'and';

                  end;

                  if ContObj < fJArray.Count - 1 then
                    Aux := Aux + 'or';

                end;

                OrderBy := ' order by ';
                for i := 0 to RecCount - 1 do
                begin
                  OrderBy := OrderBy + PKNome[i].aCampo;
                  if i < RecCount - 1 then
                    OrderBy := OrderBy + ', ';
                end;

                fPriQry.Connection.Free;
                fPriQry.Close;

                OpenPriQry(format('select * from %s where %s ', [Cmd.NomeTabela, Aux]) + OrderBy, true);

                Cmd.CNT_Server := '0';

                Cont := 0;
                if fPriQry.RecordCount = fJArray.Count then
                begin

                  for ContObj := 0 to fJArray.Count - 1  do   //alterando os fields
                  begin

                    JObj :=  fJArray.Items[ContObj] as TJsonObject;

                    fPriQry.Edit;
                    for i := 0 to JObj.Count - 1 do
                    begin
                      try

                        PKNome[0].aCampo := uppercase(JObj.Pairs[i].JsonString.Value);
                        PKNome[0].aValue := JObj.Pairs[i].JsonValue.Value;

                        if PKNome[0].aCampo = 'CNTUPDATE' then
                        begin
                          if strtoint( PKNome[0].aValue ) > strtoint(Cmd.CNT_Server) then
                            Cmd.CNT_Server := PKNome[0].aValue;
                        end;

                        lField := fPriQry.FieldByName(PKNome[0].aCampo).FieldNo - 1;

                        if PKNome[0].aValue <> '' then
                        begin

                          case fPriQry.FieldDefs.Items[lField].DataType of
                            Data.DB.ftString,
                            Data.DB.ftFixedChar : fPriQry.Fields.Fields[lField].AsString := PKNome[0].aValue;
                            Data.DB.ftDateTime,
                            Data.DB.ftTimeStamp,
                            Data.DB.ftDate:
                            begin
                              if PKNome[0].aCampo = 'DATAALTERACAO' then
                              begin
                                if fPriQry.Fields.Fields[lField].AsDateTime > strtodatetime(PKNome[0].aValue, gCustonDate) then
                                begin
                                  fPriQry.Cancel;
                                  inc(cont);
                                  break;
                                end;
                              end;
                              fPriQry.Fields.Fields[lField].AsDateTime := strtodateTime(PKNome[0].aValue, gCustonDate);
                            end;
                            Data.DB.ftInteger: fPriQry.Fields.Fields[lField].AsInteger := strtointdef(PKNome[0].aValue, 0);
                            Data.DB.ftFloat: fPriQry.Fields.Fields[lField].AsFloat := StrToFloatdef(PKNome[0].aValue, 0);
                            Data.DB.ftCurrency: fPriQry.Fields.Fields[lField].AsCurrency := Strtocurrdef(PKNome[0].aValue, 0);
                          end;
                        end else  fPriQry.Fields.Fields[lField].Clear;

                      except

                      end;
                    end;

                    if fPriQry.State = dsEdit then
                    begin
                      fPriQry.FieldByName('CNTInsert').AsInteger := strtoint(CFG.numTerminal) * -1;
                      fPriQry.Post;
                    end;

                    fPriQry.Next;
                  end;

                  lConfirmServer := 1;
                  if fPriQry.ChangeCount > 0 then
                    lconfirmServer := AplicarUpdates(false, fJArray.Count - Cont );//Result := Result + AplicarUpdates(false, JArray.Count - Cont );

                  if lConfirmServer = 0 then
                  begin
                    RestRequest.Resource := 'sync/update/cleansync/' +  Cmd.NomeTabela + '/' + Cmd.CNT_Server + '/' + CFG.numTerminal + '/' + CFG.empresa_id;//'sync/confirm/insert?tabela=' + Cmd.NomeTabelaGeniusis + '&terminal=' + CFG.numTerminal + '&status=true'   // + CFG.numTerminal
                    try
                      RESTRequest.Execute;
                    except
                      lErros := 1;
                      exit;
                    end;
                    AtualizaConexoesTabela('ESPUPDATESERVER', strtoint(Cmd.CNT_Server)); //colocando igual server e cliente
                  end;

                  lErros := validarMsgServer(sRet);

                end else ListaErros.Add( '#erro: Qtde de Registros diferente entre tabela e json' );//Result := Result + '"#erro: Qtde de Registros diferente entre tabela e json "}';
              end else  ListaErros.Add( '#erro: Não existe PrimaryKey');//Result := Result + ' #erro: Não existe PrimaryKey';
            end else ListaErros.Add( '#erro json vazio' );//Result := Result + '"#erro json vazio "}' ;
